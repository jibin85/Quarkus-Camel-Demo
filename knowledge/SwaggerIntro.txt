Swagger (now known as OpenAPI Specification) is a framework for describing and documenting RESTful APIs. Here's a comprehensive explanation:

1. Key Purposes:
- API Documentation: Provides detailed information about endpoints, methods, parameters
- API Testing: Allows testing API calls directly from the documentation interface
- Code Generation: Can generate client/server code from the API specification
- Standardization: Creates a standard format for API documentation across teams/projects

2. Core Components:
yaml
# Basic Swagger/OpenAPI structure
openapi: 3.0.0
info:
  title: Sample API
  version: 1.0.0
paths:
  /users:
    get:
      summary: Returns a list of users
      responses:
        '200':
          description: Successfully retrieved users
    post:
      summary: Creates a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string


3. Common Annotations (using Java/Quarkus as example):
java
@Path("/users")
@Tag(name = "User Management")
public class UserResource {

    @GET
    @Operation(summary = "Get all users")
    @APIResponses(value = {
        @APIResponse(
            responseCode = "200",
            description = "List of users",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = User.class)
            )
        )
    })
    public List<User> getUsers() {
        // Implementation
    }

    @POST
    @Operation(summary = "Create new user")
    public Response createUser(
        @RequestBody(
            description = "User object",
            required = true,
            content = @Content(schema = @Schema(implementation = User.class))
        ) User user
    ) {
        // Implementation
    }
}


4. Key Features:

- API Metadata:
yaml
info:
  title: My API
  description: API description
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com


- Security Definitions:
yaml
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT


- Data Models:
yaml
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string


5. Benefits:

- Documentation:
  - Auto-generated, always up-to-date documentation
  - Interactive API testing interface
  - Clear visibility of request/response structures

- Development:
  - Code generation for multiple languages
  - Consistent API design across teams
  - Easy API testing and validation

- Collaboration:
  - Clear contract between frontend and backend teams
  - Easy sharing of API specifications
  - Version control of API documentation

6. Quarkus Integration Example:
java
// Configuration in application.properties
quarkus.swagger-ui.path=/swagger-ui
quarkus.swagger-ui.always-include=true

// Enable OpenAPI
@OpenAPIDefinition(
    info = @Info(
        title = "My API",
        version = "1.0.0",
        description = "API Description"
    ),
    tags = {
        @Tag(name = "users", description = "User Operations"),
        @Tag(name = "orders", description = "Order Operations")
    }
)
@ApplicationPath("/api")
public class Application extends Application {
    // ...
}


7. Testing with Swagger UI:
- Access via browser (typically at `/swagger-ui`)
- Try out API endpoints directly
- View request/response schemas
- Test different content types and parameters

8. Best Practices:
java
// Good documentation
@Operation(
    summary = "Create user",
    description = "Creates a new user in the system",
    responses = {
        @ApiResponse(
            responseCode = "201",
            description = "User created successfully"
        ),
        @ApiResponse(
            responseCode = "400",
            description = "Invalid input"
        )
    }
)

// Clear parameter documentation
@Parameter(
    name = "userId",
    description = "ID of the user",
    required = true,
    example = "123"
)

// Schema examples
@Schema(
    example = "{\"name\": \"John Doe\", \"email\": \"john@example.com\"}"
)


Swagger/OpenAPI is particularly useful in modern microservices architectures where clear API documentation and testing capabilities are essential for development and maintenance.